#include "finger.h"

const u8 CMD_DATA[][26] = {
    {0x55, 0xAA, 0x00, 0x00, 0x24, 0x00, 0x04, 0x00, 0x03,
     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x01},
    {0x55, 0xAA, 0x00, 0x00, 0x24, 0x00, 0x04, 0x00, 0x03,
     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x01},
    {0x55, 0xAA, 0x00, 0x00, 0x24, 0x00, 0x04, 0x00, 0x03,
     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x01},
    {0x55, 0xAA, 0x00, 0x00, 0x24, 0x00, 0x04, 0x00, 0x03,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x01},
    {0x55, 0xAA, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01},
    {0x55, 0xAA, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x01},
    {0x55, 0xAA, 0x00, 0x00, 0x63, 0x00, 0x06, 0x00, 0x00,
     0x00, 0x01, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB9, 0x01},
    {0x55, 0xAA, 0x00, 0x00, 0x45, 0x00, 0x04, 0x00, 0x01,
     0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x01},
    {0x55, 0xAA, 0x00, 0x00, 0x60, 0x00, 0x02, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x01},
    {0x55, 0xAA, 0x00, 0x00, 0x60, 0x00, 0x02, 0x00, 0x01,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x01},
    {0x55, 0xAA, 0x00, 0x00, 0x60, 0x00, 0x02, 0x00, 0x02,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x01},
    {0x55, 0xAA, 0x00, 0x00, 0x61, 0x00, 0x03, 0x00, 0x00,
     0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x01},
};
Finger::Finger(int pinRx, int pinTx) : serialFinger(pinRx, pinTx) {}

/**
 * @brief 初始化软串口
 * @retval None
 */
void Finger::init() { serialFinger.begin(115200); }
/**
 * @brief  根据枚举值的不同发送不同的指令给指纹模块
 * @param  cmd 指定命令 @ref Command_t
 * @retval None
 */
void Finger::sendCmd(Command_t cmd) {
    serialFinger.write(CMD_DATA[cmd], 26);
    /* 等待指纹模块返回26个字节应答数据 */
    serialFinger.readBytes(recvBuff, 26);
}

/**
 * @brief  尝试指纹解锁
 * @retval 是否比对成功
 */
bool Finger::readFinger() {
    /* 指示灯灭, 阻塞等待指纹模块上有手指按下 */
    sendCmd(CMD_LED_ALL_OFF);
    sendCmd(CMD_FINGER_DETECT);
    if (recvBuff[10] != 1) {
        // 无指纹按下
        return false;
    }
    sendCmd(CMD_GET_IMAGE);
    if (recvBuff[8] != 0x00) {
        Serial.println("获取指纹失败");
        return false;
    }

    // 生成指纹特征并验证是否匹配已录入的指纹
    sendCmd(CMD_GENERATE_0);
    sendCmd(CMD_SEARCH_FINGERPRINT);
    if (recvBuff[6] == 0x05 && recvBuff[10] > 0) {
        // 指纹匹配成功
        Serial.println("指纹比对成功");
        sendCmd(CMD_LED_GREEN_ON);
        return true;
    } else {
        // 指纹数据和录入过的都不匹配，亮红灯
        sendCmd(CMD_LED_RED_ON);
        Serial.println("指纹比对失败");
        return false;
    }
}
